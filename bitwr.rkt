#lang racket
(require racket/format)
(provide (all-defined-out))

(define << arithmetic-shift)
(define || bitwise-ior)
(define & bitwise-and)
(define ^ bitwise-xor)

(define (binarize val [len 32]) (~r val #:base 2 #:min-width len #:pad-string "0"))

(define bit-reader%
  (class object%
    (super-new)
    (init path)
    (define file (open-input-file path))
    (define/public (close-file) (close-input-port file))
    (define counter 0)
    (define buffer 0)
    (define/public (get-counter) counter)
    (define/public (get-buffer) buffer)
    (define/public (read-bit)
      (define actual-counter (remainder counter 8))
      (when (= 0 actual-counter) (set! buffer (read-byte file)))
      (when (eof-object? buffer) (error "Max is:" counter))
      (set! counter (add1 counter))
      (<< (& buffer (<< 1 (- 7 actual-counter))) (- actual-counter 7)))
    (define/public (read-bits n)
      (for/fold ([result 0]) ([i n])
        (|| (<< result 1) (read-bit))))))

(define bit-writer%
  (class object%
    (super-new)
    (init path)
    (define file (open-output-file path #:exists 'replace))
    (define/public (close-file) (close-output-port file))
    (define counter 0)
    (define buffer 0)
    (define/public (get-counter) counter)
    (define/public (get-buffer) buffer)
    (define/public (write-bit bit)
      (set! buffer (|| (<< buffer 1) bit))
      (set! counter (add1 counter))
      (when (= 0 (remainder counter 8))
        (write-byte buffer file)
        (set! buffer 0)))
    (define/public (write-bits val n)
      (for ([i n])
        (write-bit (<< (& val (<< 1 (- (sub1 n) i))) (- i (sub1 n))))))))